使用中文回答

@src @api 
@openapi.yaml  是后端 api 定义文件
项目使用的 @tanstack/react-query 和 react-router": "^7.1.3

完成证书管理页面，要求如下:
1. 使用 shadcn 的组件库
2. 使用 tanstack query 进行数据请求
3. 使用 react-hook-form 和 zod 进行表单验证
4. 页面简洁大方
5. 按照项目原本的目录结构进行组织
7. 代码不出错，可以运行

详细要求如下:

1. 对齐后端 api
2. 完成 证书添加，证书删除，证书获取，证书更新
3. 证书 的表格 可以参考 @logs-attack.tsx  ，使用的是 @tanstack/react-table  要求无翻页，使用  tanstack query 哨兵滚动模式
4. 表格只展示 证书的名字，证书的 Domains，IssuerName和过期时间放在一个单元格
5. 证书的解析使用 node-forge 库，解析证书的 ExpireDate ExpireDate FingerPrint Domains 字段，这个功能写在工具函数中，写在 utils 目录下
6. 证书上传表单，用户可以选择输入公钥，私钥，也可以是上传公钥，私钥文件，ExpireDate ExpireDate FingerPrint Domains 这些信息由解析得出，不需要用户输入，另外描述字段是可选的
7. 证书创建的 modal 框组件化，方便后续别的页面调用证书创建
8. 组件 icon 使用 lucide-react
9. 代码工整，有完整的类型，简洁，可维护性高

非常重要的一点
@context.txt  是项目的上下文信息，在设计的时候可以参考这个文件获取目前项目已有的信息，在完成本次变更后，所做的变更需要同步到 context.txt 上下文文件中，方便下次提问。

项目核心结构如下
src/
├── api/                   # API相关文件
│   ├── index.ts           # 基础配置和拦截器
│   ├── auth.ts            # 认证相关API
│   ├── waf.ts             # WAF日志相关API
│   ├── sites.ts           # 站点管理相关API
│   └── services.ts        # 统一导出所有API服务
├── features/              # 功能模块（包含特定功能的组件和hooks）
│   ├── auth/              # 认证相关功能
│   │   ├── components/    # 认证相关组件
│   │   └── hooks.ts       # 认证相关自定义hook
│   └── ... 
├── store/                 # 全局状态管理
│   ├── auth.ts
│   ├── logs.ts
│   └── index.ts
├── validations/           # 表单验证逻辑
│   ├── auth.ts
│   └── ...
├── components/            # 通用组件
│   ├── table/             # 表格组件
│   ├── layout/            # 布局组件
│   │   ├── breadcrumb.tsx # 面包屑组件
│   │   ├── sidebar.tsx    # 侧边栏组件
│   │   └── root-layout.tsx # 根布局组件
│   ├── ui/                # 通用UI组件
├── router/                # 路由配置
│   ├── config.ts          # 路由配置，包括面包屑的 nav 生成等
│   └── ...
├── utils/                 # shadcn ui 组件
│   ├── env.ts
│   └── ...
├── hooks/                 # 自定义hooks
├── lib/                   # 工具库
│   ├── utils.ts
│   └── ...
├── types/                 # 类型定义
│   ├── auth.ts
│   └── ...
├── pages/                 # 页面组件
│   ├── auth/              # 认证相关页面
│   │   ├── login.tsx      # 登录页面
│   │   ├── reset-password.tsx # 重置密码页面
│   └── ...

