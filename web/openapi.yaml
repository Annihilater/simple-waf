basePath: /api/v1
definitions:
  dto.AttackEventAggregateResult:
    description: 攻击事件聚合结果，按客户端IP和域名分组统计
    properties:
      clientIpAddress:
        description: 客户端IP地址
        example: 192.168.1.100
        type: string
      count:
        description: 攻击次数
        example: 15
        type: integer
      domain:
        description: 域名
        example: example.com
        type: string
      durationInMinutes:
        description: 攻击持续时间(分钟)
        example: 18.2
        type: number
      firstAttackTime:
        description: 首次攻击时间
        example: "2024-03-18T08:12:33Z"
        type: string
      isOngoing:
        description: 是否正在进行中
        example: true
        type: boolean
      lastAttackTime:
        description: 最近攻击时间
        example: "2024-03-18T08:30:45Z"
        type: string
    type: object
  dto.AttackEventResponse:
    description: 攻击事件分页查询结果
    properties:
      currentPage:
        description: 当前页码
        example: 1
        type: integer
      pageSize:
        description: 每页大小
        example: 10
        type: integer
      results:
        description: 聚合结果列表
        items:
          $ref: '#/definitions/dto.AttackEventAggregateResult'
        type: array
      totalCount:
        description: 总记录数
        example: 35
        type: integer
      totalPages:
        description: 总页数
        example: 4
        type: integer
    type: object
  dto.AttackLogResponse:
    description: 攻击日志分页查询结果
    properties:
      currentPage:
        description: 当前页码
        example: 1
        type: integer
      pageSize:
        description: 每页大小
        example: 10
        type: integer
      results:
        description: 日志记录列表
        items:
          $ref: '#/definitions/model.WAFLog'
        type: array
      totalCount:
        description: 总记录数
        example: 128
        type: integer
      totalPages:
        description: 总页数
        example: 13
        type: integer
    type: object
  dto.BackendDTO:
    properties:
      servers:
        description: 服务器列表
        items:
          $ref: '#/definitions/dto.ServerDTO'
        type: array
    required:
    - servers
    type: object
  dto.CertificateCreateRequest:
    description: 创建证书的请求参数
    properties:
      description:
        description: 证书描述
        example: 用于example.com的证书
        type: string
      domains:
        description: 证书绑定的域名列表
        example:
        - '["example.com"]'
        items:
          type: string
        type: array
      expireDate:
        description: 证书过期日期
        example: "2023-12-31T23:59:59Z"
        type: string
      fingerPrint:
        description: 证书指纹
        example: AA:BB:CC:DD:...
        type: string
      issuerName:
        description: 颁发机构
        example: Let's Encrypt
        type: string
      name:
        description: 证书名称/别名
        example: example-cert
        type: string
      privateKey:
        description: 私钥内容（PEM格式）
        type: string
      publicKey:
        description: 公钥内容（PEM格式）
        type: string
    required:
    - privateKey
    - publicKey
    type: object
  dto.CertificateDTO:
    properties:
      certName:
        description: 证书名称
        example: my-cert
        type: string
      expireDate:
        description: 过期时间
        type: string
      fingerPrint:
        description: 证书指纹
        type: string
      issuerName:
        description: 颁发机构
        example: Let's Encrypt
        type: string
      privateKey:
        description: 私钥内容
        type: string
      publicKey:
        description: 公钥内容
        type: string
    required:
    - certName
    - expireDate
    - fingerPrint
    - issuerName
    - privateKey
    - publicKey
    type: object
  dto.CertificateListResponse:
    description: 证书列表响应
    properties:
      items:
        description: 证书列表
        items:
          $ref: '#/definitions/model.CertificateStore'
        type: array
      total:
        description: 总数
        type: integer
    type: object
  dto.CertificateUpdateRequest:
    description: 更新证书的请求参数
    properties:
      description:
        description: 证书描述
        example: 用于example.com的证书
        type: string
      domains:
        description: 证书绑定的域名列表
        example:
        - '["example.com"]'
        items:
          type: string
        type: array
      expireDate:
        description: 证书过期日期
        example: "2023-12-31T23:59:59Z"
        type: string
      fingerPrint:
        description: 证书指纹
        example: AA:BB:CC:DD:...
        type: string
      issuerName:
        description: 颁发机构
        example: Let's Encrypt
        type: string
      name:
        description: 证书名称/别名
        example: example-cert
        type: string
      privateKey:
        description: 私钥内容（PEM格式）
        type: string
      publicKey:
        description: 公钥内容（PEM格式）
        type: string
    type: object
  dto.CreateSiteRequest:
    description: 创建站点的请求参数
    properties:
      backend:
        allOf:
        - $ref: '#/definitions/dto.BackendDTO'
        description: 后端服务器配置
      certificate:
        allOf:
        - $ref: '#/definitions/dto.CertificateDTO'
        description: 证书信息
      domain:
        description: 域名
        example: example.com
        type: string
      enableHTTPS:
        description: 是否启用HTTPS
        example: false
        type: boolean
      listenPort:
        description: 监听端口
        example: 8080
        type: integer
      name:
        description: 站点名称
        example: my-site
        type: string
      wafEnabled:
        description: 是否启用WAF
        example: false
        type: boolean
      wafMode:
        description: WAF模式
        example: observation
        type: string
    required:
    - backend
    - domain
    - listenPort
    - name
    type: object
  dto.GetUserInfoResponseData:
    properties:
      id:
        example: "1234567890"
        type: string
      needReset:
        example: false
        type: boolean
      role:
        example: admin
        type: string
      username:
        example: user123
        type: string
    type: object
  dto.LoginResponseData:
    properties:
      token:
        description: JWT token
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      user:
        allOf:
        - $ref: '#/definitions/model.User'
        description: 用户信息
    type: object
  dto.ResetPasswordResponseData:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/model.User'
      message:
        example: 操作成功
        type: string
      requestId:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.ServerDTO:
    properties:
      host:
        description: 主机地址
        example: backend.example.com
        type: string
      isSSL:
        description: 是否启用SSL
        example: false
        type: boolean
      port:
        description: 端口
        example: 80
        type: integer
    required:
    - host
    - port
    type: object
  dto.SiteListResponse:
    description: 站点列表响应
    properties:
      items:
        description: 站点列表
        items:
          $ref: '#/definitions/model.Site'
        type: array
      total:
        description: 总数
        type: integer
    type: object
  dto.SiteResponse:
    description: 站点信息响应
    properties:
      activeStatus:
        description: 站点是否激活
        type: boolean
      backend:
        allOf:
        - $ref: '#/definitions/model.Backend'
        description: 后端服务器配置
      certificate:
        allOf:
        - $ref: '#/definitions/model.Certificate'
        description: 证书信息
      createdAt:
        type: string
      domain:
        description: 域名，如 a.com
        type: string
      enableHTTPS:
        description: 是否启用HTTPS
        type: boolean
      id:
        description: 站点ID
        type: string
      listenPort:
        description: 监听端口，如 9000
        type: integer
      name:
        description: 站点名称
        type: string
      updatedAt:
        type: string
      wafEnabled:
        description: 是否启用WAF
        type: boolean
      wafMode:
        allOf:
        - $ref: '#/definitions/model.WAFMode'
        description: WAF防护模式
    type: object
  dto.UpdateSiteRequest:
    description: 更新站点的请求参数
    properties:
      activeStatus:
        description: 站点状态
        example: true
        type: boolean
      backend:
        allOf:
        - $ref: '#/definitions/dto.BackendDTO'
        description: 后端服务器配置
      certificate:
        allOf:
        - $ref: '#/definitions/dto.CertificateDTO'
        description: 证书信息
      domain:
        description: 域名
        example: example.com
        type: string
      enableHTTPS:
        description: 是否启用HTTPS
        example: false
        type: boolean
      listenPort:
        description: 监听端口
        example: 8080
        type: integer
      name:
        description: 站点名称
        example: my-site
        type: string
      wafEnabled:
        description: 是否启用WAF
        example: false
        type: boolean
      wafMode:
        description: WAF模式
        example: observation
        type: string
    type: object
  dto.UserCreateRequest:
    properties:
      password:
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - user
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - password
    - role
    - username
    type: object
  dto.UserLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.UserPasswordResetRequest:
    properties:
      newPassword:
        minLength: 6
        type: string
      oldPassword:
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  dto.UserUpdateRequest:
    properties:
      needReset:
        type: boolean
      password:
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - auditor
        - configurator
        - user
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    type: object
  model.APIResponse:
    description: API响应的标准格式
    properties:
      code:
        description: HTTP状态码
        example: 200
        type: integer
      data:
        description: 响应数据
      error:
        description: 错误信息(当success=false时)
        example: 参数错误
        type: string
      message:
        description: 响应消息
        example: 操作成功
        type: string
      requestId:
        description: 请求ID，用于跟踪
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      success:
        description: 是否成功
        example: true
        type: boolean
      timestamp:
        description: 响应时间戳
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  model.Backend:
    properties:
      servers:
        description: 服务器列表
        items:
          $ref: '#/definitions/model.Server'
        type: array
    type: object
  model.Certificate:
    properties:
      certName:
        description: 证书名称/别名
        type: string
      expireDate:
        description: 证书过期日期
        type: string
      fingerPrint:
        description: 证书指纹
        type: string
      issuerName:
        description: 颁发机构
        type: string
      privateKey:
        description: 私钥内容（PEM格式）
        type: string
      publicKey:
        description: 公钥内容（PEM格式）
        type: string
    type: object
  model.CertificateStore:
    properties:
      createdAt:
        description: 创建时间
        type: string
      description:
        description: 证书描述
        type: string
      domains:
        description: 证书绑定的域名列表
        items:
          type: string
        type: array
      expireDate:
        description: 证书过期日期
        type: string
      fingerPrint:
        description: 证书指纹
        type: string
      id:
        description: 证书ID
        type: string
      issuerName:
        description: 颁发机构
        type: string
      name:
        description: 证书名称/别名
        type: string
      privateKey:
        description: 私钥内容（PEM格式）
        type: string
      publicKey:
        description: 公钥内容（PEM格式）
        type: string
      updatedAt:
        description: 更新时间
        type: string
    type: object
  model.ErrResponse:
    description: 错误的API响应标准格式
    properties:
      code:
        example: 400
        type: integer
      error:
        example: 参数错误
        type: string
      message:
        example: 请求参数错误
        type: string
      requestId:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  model.ErrResponseDontShowError:
    description: 错误的API响应标准格式,不展示 error
    properties:
      code:
        example: 400
        type: integer
      message:
        example: 请求参数错误
        type: string
      requestId:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  model.Log:
    description: WAF 日志条目，包含详细的规则匹配信息
    properties:
      accuracy:
        description: Accuracy level of the rule match (0-10)
        example: 9
        type: integer
      logRaw:
        description: Raw log data
        example: '[2024-03-18 08:12:33] [error] 12345#12345: *1234 ModSecurity: Access
          denied with code 403 (phase 1). Matched \"Operator ''Rx'' with parameter
          ''(?:acunetix|Morfeus|ZmEu)'' against variable ''REQUEST_HEADERS:User-Agent''\"
          [file \"/etc/nginx/modsec/coreruleset/rules/REQUEST-913-SCANNER-DETECTION.conf\"]
          [line \"48\"] [id \"913100\"] [rev \"1\"] [msg \"Web Application Scanner
          detected\"] [data \"Matched Data: acunetix found within REQUEST_HEADERS:User-Agent:
          Acunetix/1.0\"] [severity \"CRITICAL\"] [ver \"OWASP_CRS/3.3.0\"] [maturity
          \"9\"] [accuracy \"9\"] [tag \"application-multi\"] [tag \"language-multi\"]
          [tag \"platform-multi\"] [tag \"attack-reputation-scanner\"], client: 192.168.1.100,
          server: example.com, request: \"GET /api/users HTTP/1.1\", host: \"example.com\"'
        type: string
      message:
        description: Log message
        example: Web Application Scanner detected
        type: string
      payload:
        description: Attack payload
        example: Acunetix/1.0
        type: string
      phase:
        description: Phase of the request processing
        example: 1
        type: integer
      ruleId:
        description: Rule identifier
        example: 100012
        type: integer
      secLangRaw:
        description: Raw security language
        example: SecRule REQUEST_HEADERS:User-Agent \"@rx (?:acunetix|Morfeus|ZmEu)\"
          \"id:1008,phase:1,t:lowercase,t:none,pass,nolog,tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-reputation-scanner',severity:'CRITICAL',msg:'Web
          Application Scanner detected'"
        type: string
      secMark:
        description: Security mark of the rule
        example: web_attack_scanner
        type: string
      severity:
        description: Severity level (0-5)
        example: 2
        type: integer
    type: object
  model.Server:
    properties:
      host:
        description: 主机地址，如 IP 或域名
        type: string
      isSSL:
        description: 是否启用SSL
        type: boolean
      port:
        description: 端口
        type: integer
    type: object
  model.Site:
    properties:
      activeStatus:
        description: 站点是否激活
        type: boolean
      backend:
        allOf:
        - $ref: '#/definitions/model.Backend'
        description: 后端服务器配置
      certificate:
        allOf:
        - $ref: '#/definitions/model.Certificate'
        description: 证书信息
      createdAt:
        type: string
      domain:
        description: 域名，如 a.com
        type: string
      enableHTTPS:
        description: 是否启用HTTPS
        type: boolean
      id:
        description: 站点ID
        type: string
      listenPort:
        description: 监听端口，如 9000
        type: integer
      name:
        description: 站点名称
        type: string
      updatedAt:
        type: string
      wafEnabled:
        description: 是否启用WAF
        type: boolean
      wafMode:
        allOf:
        - $ref: '#/definitions/model.WAFMode'
        description: WAF防护模式
    type: object
  model.SuccessResponse:
    description: 成功的API响应标准格式
    properties:
      code:
        example: 200
        type: integer
      data: {}
      message:
        example: 操作成功
        type: string
      requestId:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  model.SuccessResponseNoData:
    description: 成功的API响应标准格式,没有 data
    properties:
      code:
        example: 200
        type: integer
      message:
        example: 操作成功
        type: string
      requestId:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  model.User:
    properties:
      createdAt:
        type: string
      id:
        type: string
      lastLogin:
        type: string
      needReset:
        description: 是否需要重置密码
        type: boolean
      permissions:
        description: 额外权限
        items:
          type: string
        type: array
      role:
        description: 用户角色
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  model.WAFLog:
    description: WAF 安全事件日志记录，包含完整的攻击事件信息
    properties:
      accuracy:
        description: Accuracy level of the rule match (0-10)
        example: 9
        type: integer
      clientIpAddress:
        description: Source IP address
        example: 192.168.1.100
        type: string
      createdAt:
        description: Timestamp of the event
        example: "2024-03-18T08:12:33Z"
        type: string
      domain:
        description: Target domain
        example: example.com
        type: string
      logs:
        description: Associated log entries
        items:
          $ref: '#/definitions/model.Log'
        type: array
      message:
        description: Event message or description
        example: Web Application Scanner detected
        type: string
      payload:
        description: Attack payload
        example: Acunetix/1.0
        type: string
      phase:
        description: Phase of the request processing
        example: 1
        type: integer
      request:
        description: Raw HTTP request
        example: |-
          GET /api/users HTTP/1.1
          Host: example.com
          User-Agent: Acunetix/1.0
          Accept: */*
        type: string
      response:
        description: Raw HTTP response
        example: |-
          HTTP/1.1 403 Forbidden
          Server: nginx
          Date: Wed, 18 Mar 2024 08:12:33 GMT
          Content-Type: text/html
          Content-Length: 146
        type: string
      ruleId:
        description: ID of the triggered rule
        example: 100012
        type: integer
      secLangRaw:
        description: Raw security language definition
        example: SecRule REQUEST_HEADERS:User-Agent \"@rx (?:acunetix|Morfeus|ZmEu)\"
          \"id:1008,phase:1,t:lowercase,t:none,pass,nolog,tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-reputation-scanner',severity:'CRITICAL',msg:'Web
          Application Scanner detected'"
        type: string
      secMark:
        description: Security mark of the rule
        example: web_attack_scanner
        type: string
      serverIpAddress:
        description: Destination IP address
        example: 10.0.0.5
        type: string
      severity:
        description: Severity level of the event (0-5)
        example: 2
        type: integer
      uri:
        description: Request URI
        example: /api/users
        type: string
    type: object
  model.WAFMode:
    enum:
    - protection
    - observation
    type: string
    x-enum-comments:
      WAFModeObservation: 观察模式
      WAFModeProtection: 防护模式
    x-enum-varnames:
    - WAFModeProtection
    - WAFModeObservation
host: localhost:2333
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: 简单的 Web 应用防火墙管理系统 API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Simple-WAF API
  version: "1.0"
paths:
  /api/v1/certificates:
    get:
      description: 获取所有SSL/TLS证书列表，支持分页
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页数量
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 获取证书列表成功
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CertificateListResponse'
              type: object
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      security:
      - BearerAuth: []
      summary: 获取证书列表
      tags:
      - 证书管理
    post:
      consumes:
      - application/json
      description: 创建一个新的SSL/TLS证书
      parameters:
      - description: 证书信息
        in: body
        name: certificate
        required: true
        schema:
          $ref: '#/definitions/dto.CertificateCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 证书创建成功
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.CertificateStore'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/model.ErrResponse'
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "403":
          description: 禁止访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "409":
          description: 证书名称已存在
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      security:
      - BearerAuth: []
      summary: 创建新证书
      tags:
      - 证书管理
  /api/v1/certificates/{id}:
    delete:
      description: 删除指定的SSL/TLS证书
      parameters:
      - description: 证书ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 证书删除成功
          schema:
            $ref: '#/definitions/model.SuccessResponseNoData'
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "403":
          description: 禁止访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "404":
          description: 证书不存在
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      security:
      - BearerAuth: []
      summary: 删除证书
      tags:
      - 证书管理
    get:
      description: 根据ID获取证书详情
      parameters:
      - description: 证书ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取证书详情成功
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.CertificateStore'
              type: object
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "404":
          description: 证书不存在
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      security:
      - BearerAuth: []
      summary: 获取单个证书
      tags:
      - 证书管理
    put:
      consumes:
      - application/json
      description: 更新指定证书的信息
      parameters:
      - description: 证书ID
        in: path
        name: id
        required: true
        type: string
      - description: 证书更新信息
        in: body
        name: certificate
        required: true
        schema:
          $ref: '#/definitions/dto.CertificateUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 证书更新成功
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.CertificateStore'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/model.ErrResponse'
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "403":
          description: 禁止访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "404":
          description: 证书不存在
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "409":
          description: 证书名称已存在
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      security:
      - BearerAuth: []
      summary: 更新证书
      tags:
      - 证书管理
  /api/v1/sites:
    get:
      description: 获取所有站点配置列表
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页数量
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 获取站点列表成功
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.SiteListResponse'
              type: object
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      security:
      - BearerAuth: []
      summary: 获取站点列表
      tags:
      - 站点管理
    post:
      consumes:
      - application/json
      description: 创建一个新的站点配置
      parameters:
      - description: 站点信息
        in: body
        name: site
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSiteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 站点创建成功
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.SiteResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/model.ErrResponse'
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "403":
          description: 禁止访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "409":
          description: 域名和端口组合已存在
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      security:
      - BearerAuth: []
      summary: 创建新站点
      tags:
      - 站点管理
  /api/v1/sites/{id}:
    delete:
      description: 删除指定的站点配置
      parameters:
      - description: 站点ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 站点删除成功
          schema:
            $ref: '#/definitions/model.SuccessResponseNoData'
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "403":
          description: 禁止访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "404":
          description: 站点不存在
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      security:
      - BearerAuth: []
      summary: 删除站点
      tags:
      - 站点管理
    get:
      description: 根据ID获取站点详情
      parameters:
      - description: 站点ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取站点详情成功
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.SiteResponse'
              type: object
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "404":
          description: 站点不存在
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      security:
      - BearerAuth: []
      summary: 获取单个站点
      tags:
      - 站点管理
    put:
      consumes:
      - application/json
      description: 更新指定站点的配置
      parameters:
      - description: 站点ID
        in: path
        name: id
        required: true
        type: string
      - description: 站点更新信息
        in: body
        name: site
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateSiteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 站点更新成功
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.SiteResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/model.ErrResponse'
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "403":
          description: 禁止访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "404":
          description: 站点不存在
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "409":
          description: 域名和端口组合已被其他站点使用
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      security:
      - BearerAuth: []
      summary: 更新站点
      tags:
      - 站点管理
  /api/v1/waf/logs:
    get:
      consumes:
      - application/json
      description: Retrieve detailed attack logs with filtering and pagination
      parameters:
      - description: Rule ID
        in: query
        name: ruleId
        type: integer
      - description: Client IP Address
        in: query
        name: clientIpAddress
        type: string
      - description: Domain name
        in: query
        name: domain
        type: string
      - description: Port number
        in: query
        name: port
        type: integer
      - description: Start time (RFC3339 format)
        in: query
        name: startTime
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: endTime
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.AttackLogResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      summary: Get individual attack logs
      tags:
      - WAF Logs
  /api/v1/waf/logs/events:
    get:
      consumes:
      - application/json
      description: Retrieve attack events aggregated by client IP and domain
      parameters:
      - description: Client IP Address
        in: query
        name: clientIpAddress
        type: string
      - description: Domain name
        in: query
        name: domain
        type: string
      - description: Port number
        in: query
        name: port
        type: integer
      - description: Start time (RFC3339 format)
        in: query
        name: startTime
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: endTime
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.AttackEventResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      summary: Get aggregated attack events
      tags:
      - WAF Logs
  /auth/login:
    post:
      consumes:
      - application/json
      description: 用户登录并获取JWT令牌
      parameters:
      - description: 登录信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 登录成功
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponseData'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/model.ErrResponse'
        "401":
          description: 用户名或密码错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      summary: 用户登录
      tags:
      - 认证
  /auth/me:
    get:
      description: 获取当前登录用户的详细信息
      produces:
      - application/json
      responses:
        "200":
          description: 获取用户信息成功
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetUserInfoResponseData'
              type: object
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      security:
      - BearerAuth: []
      summary: 获取当前用户信息
      tags:
      - 认证
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: 用户重置自己的密码
      parameters:
      - description: 密码重置信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserPasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 密码重置成功
          schema:
            $ref: '#/definitions/model.SuccessResponseNoData'
        "400":
          description: 请求参数错误或原密码错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      security:
      - BearerAuth: []
      summary: 重置密码
      tags:
      - 认证
  /users:
    get:
      description: 获取系统中所有用户的列表
      produces:
      - application/json
      responses:
        "200":
          description: 获取用户列表成功
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.User'
                  type: array
              type: object
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "403":
          description: 禁止访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      security:
      - BearerAuth: []
      summary: 获取所有用户
      tags:
      - 用户管理
    post:
      consumes:
      - application/json
      description: 管理员创建新用户
      parameters:
      - description: 用户创建信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 用户创建成功
          schema:
            $ref: '#/definitions/dto.ResetPasswordResponseData'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/model.ErrResponse'
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "403":
          description: 禁止访问
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "409":
          description: 用户名已存在
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.ErrResponseDontShowError'
      security:
      - BearerAuth: []
      summary: 创建新用户
      tags:
      - 用户管理
  /users/{id}:
    delete:
      description: 管理员删除指定用户
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 用户删除成功
          schema:
            $ref: '#/definitions/model.APIResponse'
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.APIResponse'
        "403":
          description: 禁止访问
          schema:
            $ref: '#/definitions/model.APIResponse'
        "404":
          description: 用户不存在
          schema:
            $ref: '#/definitions/model.APIResponse'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.APIResponse'
      security:
      - BearerAuth: []
      summary: 删除用户
      tags:
      - 用户管理
    put:
      consumes:
      - application/json
      description: 管理员更新指定用户的信息
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: string
      - description: 用户更新信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 用户更新成功
          schema:
            $ref: '#/definitions/model.APIResponse'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/model.APIResponse'
        "401":
          description: 未授权访问
          schema:
            $ref: '#/definitions/model.APIResponse'
        "403":
          description: 禁止访问
          schema:
            $ref: '#/definitions/model.APIResponse'
        "404":
          description: 用户不存在
          schema:
            $ref: '#/definitions/model.APIResponse'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/model.APIResponse'
      security:
      - BearerAuth: []
      summary: 更新用户信息
      tags:
      - 用户管理
securityDefinitions:
  BearerAuth:
    description: 使用 Bearer {token} 格式进行身份验证
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"