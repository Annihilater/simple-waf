agent 代码分析

[HAProxy] ─── TCP连接 ───> [SPOE代理服务]
                              │
                        [消息类型识别]
                              │
                    ┌─────────┴──────────┐
                    │                    │
              coraza-req            coraza-res
                    │                    │
            [获取应用程序名称]      [获取应用程序名称]
                    │                    │
            [查找对应Application]  [查找对应Application]
                    │                    │
            [请求处理程序]        [响应处理程序]
                    │                    │
                    └─────────┬──────────┘
                              │
                      [处理结果返回HAProxy]
                         (状态/动作)


--------------------------------

[HAProxy请求] → [internal.Agent.Serve(Listener)] 
                          ↓
                   创建 spop.Agent
                   agent := spop.Agent{
                       Handler: a,
                       BaseContext: a.Context,
                   }
                          ↓
                [spop.Agent.Serve(Listener)]
                          ↓
                   循环Accept新连接
                   nc, err := l.Accept()
                          ↓
                   创建协议处理器
                   p := newProtocolClient(ctx, nc, as, handler)
                          ↓
                   启动goroutine处理连接
                   go func() { 
                       p.Serve() 
                   }()
                          ↓
                [protocolClient.Serve]
                   循环处理Frame
                   for {
                       f := acquireFrame()
                       f.ReadFrom(c.rw)
                       c.as.schedule(f, c)
                   }
                          ↓
                [frameHandler处理Frame]
                   根据frame类型分发
                   - frameTypeIDHaproxyHello: onHAProxyHello
                   - frameTypeIDNotify: onNotify
                   - frameTypeIDHaproxyDisconnect: onHAProxyDisconnect
                          ↓
                [onNotify处理消息] 
                   创建消息扫描器和消息对象
                   调用Handler.HandleSPOE
                          ↓ 
                [internal.Agent.HandleSPOE处理]
                          ↓
                   解析消息类型
                   switch message.NameBytes() {
                   case "coraza-req": messageHandler = HandleRequest
                   case "coraza-res": messageHandler = HandleResponse
                   }
                          ↓
                   获取应用名称
                   k := encoding.AcquireKVEntry()
                   message.KV.Next(k)
                   appName := string(k.ValueBytes())
                          ↓
                   查找Application
                   a.mtx.RLock()
                   app := a.Applications[appName]
                   a.mtx.RUnlock()
                          ↓
                   执行消息处理
                   err := messageHandler(app, ctx, writer, message)
                          ↓
                   处理返回结果
                   - 正常返回：继续处理
                   - ErrInterrupted：设置中断信息
                   - 其他错误：panic
                          ↓
                [返回给HAProxy]