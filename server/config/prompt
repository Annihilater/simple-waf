使用中文回答
@src @api 
@openapi.yaml  是后端 api 定义文件

完成站点管理页面，要求如下:
1. 使用 shadcn 的组件库
2. 使用 tanstack query 进行数据请求
3. 使用 react-hook-form 和 zod 进行表单验证
4. 页面简洁大方，好看
5. 按照项目原本的目录结构进行组织
7. 代码不出错，可以运行

详细要求如下:
1. 对齐后端 api
2. 实现 攻击事件，防护日志页面，其中 攻击事件对应  /api/v1/waf/logs/events  防护日志对应 /api/v1/waf/logs，table 使用 @tanstack/react-table, 要求有翻页，翻页组件使用 @xx，table 参考
3. 实现 攻击事件，防护日志的查询框，完成 api 的所有查询参数
4. 攻击事件页面要求如下，展示的字段为 clientIpAddress count domain firstAttackTime lastAttackTime isOngoing durationInMinutes，当 isOngoing 为 true 时，显示攻击的持续时间 durationInMinutes, 同时点击 count 会跳转至防护日志页面，传递 4. 攻击事件页面要求如下，展示的字段为 clientIpAddress count domain firstAttackTime lastAttackTime isOngoing durationInMinutes，当 isOngoing 为 true 时，显示攻击的持续时间 durationInMinutes, 同时点击 count 会跳转至防护日志页面，传递 domain clientIpAddress 查询条件到防护日志页面
5. 防护日志页面要求如下，展示的字段为

2. 完成 站点的增加，删除，获取，更新，站点的展示要求有两种布局，一种是卡片，一种是表格，表格和卡片均使用  tanstack query 哨兵滚动模式，不需要翻页，使用 @tanstack/react-table 组件,参考 @CertificateTable.tsx 
3. 站点获取，更新，删除，创建等数据管理需要进行封装，参考 @useCertificates.ts 
4. 需要展示的站点信息字段如下 Name Domain ListenPort Backend(上游) EnableHTTPS ActiveStatus WAFEnabled WAFMode,当 ActiveStatus 为 false 时，颜色灰色处理
5. 创建和更新站点信息的 dialog 对于证书字段处理时，使用证书管理接口获取证书列表 certificatesApi.getCertificates @certificate.ts   证书下拉列表展示证书的 name 和 domains 信息，通过选择的证书来填充站点的证书信息，列表中有一个选项为上传证书，即打开证书管理的上传dialog @CertificateDialog.tsx  ，上传完后，刷新证书选择下拉列表。
6. 添加站点和更新站点的  dialog，如果站点有证书，要渲染证书信息，参考 InfoRow  @CertificateForm.tsx  ，同时这个 dialog 要组件化，方便其他地方调用。
7. 对已有的站点管理代码 @site-manager.tsx  @add-site-dialog.tsx   @table-view.tsx  @grid-view.tsx   按照上面要求进行重写，页面好看，大方，符合 shadcn ui 风格，代码结构符合项目要求结构，例如 feature/site/components feature/site/hook 放站点管理的 组件化 和数据管理 hooks  types 放类型，api 放接口，validation 放数据验证，pages/setting/pages/site 放站点管理页面
8. 组件 icon 使用 lucide-react
9. 代码工整，有完整的类型，简洁，可维护性高

非常重要的一点
@context.txt  是项目的上下文信息，在设计的时候可以参考这个文件获取目前项目已有的信息，在完成本次变更后，所做的变更需要同步到 context.txt 上下文文件中，方便下次提问


项目核心结构如下
src/
├── api/                   # API相关文件
│   ├── index.ts           # 基础配置和拦截器
│   ├── auth.ts            # 认证相关API
│   ├── waf.ts             # WAF日志相关API
│   ├── sites.ts           # 站点管理相关API
│   └── services.ts        # 统一导出所有API服务
├── feature/              # 功能模块（包含特定功能的组件和hooks）
│   ├── auth/              # 认证相关功能
│   │   ├── components/    # 认证相关组件
│   │   └── hooks.ts       # 认证相关自定义hook，例如 tanstack query 数据管理的封装
│   └── ... 
├── store/                 # 全局状态管理
│   ├── auth.ts
│   ├── logs.ts
│   └── index.ts
├── validation/           # 表单验证逻辑
│   ├── auth.ts
│   └── ...
├── components/            # 通用组件
│   ├── table/             # 表格组件
│   ├── layout/            # 布局组件
│   │   ├── breadcrumb.tsx # 面包屑组件
│   │   ├── sidebar.tsx    # 侧边栏组件
│   │   └── root-layout.tsx # 根布局组件
│   ├── ui/                # 通用UI组件
├── router/                # 路由配置
│   ├── config.ts          # 路由配置，包括面包屑的 nav 生成等
│   └── ...
├── utils/                 # shadcn ui 组件
│   ├── env.ts
│   └── ...
├── hooks/                 # 自定义hooks
├── lib/                   # 工具库
│   ├── utils.ts
│   └── ...
├── types/                 # 类型定义
│   ├── auth.ts
│   └── ...
├── pages/                 # 页面组件
│   ├── auth/              # 认证相关页面
│   │   ├── login.tsx      # 登录页面
│   │   ├── reset-password.tsx # 重置密码页面
│   └── ...
