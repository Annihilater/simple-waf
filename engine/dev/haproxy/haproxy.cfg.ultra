global
    log stdout format raw local0

crt-store sites
    crt-base /usr/local/etc/haproxy/cert
    key-base /usr/local/etc/haproxy/cert
    load crt "a.com.crt" key "a.com.key" alias "a_com_cert"
    load crt "b.com.crt" key "b.com.key" alias "b_com_cert"

defaults http
    mode http
    log global
    option httplog
    timeout client 1m
    timeout server 1m
    timeout connect 10s

defaults tcp
    mode tcp
    log global
    option tcplog
    timeout client 1m
    timeout server 1m
    timeout connect 10s

# 9000 端口的多域名处理
frontend fe_9000_combined
    bind *:9000
    default_backend be_9000_https
    
    tcp-request inspect-delay 2s
    tcp-request content accept if HTTP
    tcp-request content accept if { req.ssl_hello_type 1 }
    
    use_backend be_9000_http if HTTP

frontend fe_9001_combined
    bind *:9001
    default_backend be_9001_https
    
    tcp-request inspect-delay 2s
    tcp-request content accept if HTTP
    tcp-request content accept if { req.ssl_hello_type 1 }
    
    use_backend be_9001_http if HTTP

backend be_9000_http
    server loopback-for-http abns@haproxy-9000-http send-proxy-v2

backend be_9000_https
    server loopback-for-https abns@haproxy-9000-https send-proxy-v2

backend be_9001_http
    server loopback-for-http abns@haproxy-9001-http send-proxy-v2

backend be_9001_https
    server loopback-for-https abns@haproxy-9001-https send-proxy-v2

# 9000 端口的 HTTPS 多域名处理
frontend fe_9000_https
    mode http
    bind abns@haproxy-9000-https accept-proxy ssl crt "@sites/a_com_cert" crt "@sites/b_com_cert"
    
    # 定义域名 ACL
    acl host_a_com hdr(host) -i a.com
    acl host_b_com hdr(host) -i b.com
    
    filter spoe engine coraza config /usr/local/etc/haproxy/coraza.cfg
    log-format "%ci:%cp [%t] %ft %b/%s %Th/%Ti/%TR/%Tq/%Tw/%Tc/%Tr/%Tt %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r %[var(txn.coraza.id)] spoa-error: %[var(txn.coraza.error)] waf-hit: %[var(txn.coraza.fail)]"

    http-request redirect code 302 location %[var(txn.coraza.data)] if { var(txn.coraza.action) -m str redirect }
    http-response redirect code 302 location %[var(txn.coraza.data)] if { var(txn.coraza.action) -m str redirect }
    http-request deny deny_status 403 hdr waf-block "request" if { var(txn.coraza.action) -m str deny }
    http-response deny deny_status 403 hdr waf-block "response" if { var(txn.coraza.action) -m str deny }
    http-request silent-drop if { var(txn.coraza.action) -m str drop }
    http-response silent-drop if { var(txn.coraza.action) -m str drop }
    http-request deny deny_status 500 if { var(txn.coraza.error) -m int gt 0 }
    http-response deny deny_status 500 if { var(txn.coraza.error) -m int gt 0 }
    
    use_backend be_a_servers if host_a_com
    use_backend be_b_servers if host_b_com
    default_backend httpbin_backend

# 9000 端口的 HTTP 多域名处理
frontend fe_9000_http
    mode http
    bind abns@haproxy-9000-http accept-proxy
    
    # 定义域名 ACL
    acl host_a_com hdr(host) -i a.com
    acl host_b_com hdr(host) -i b.com
    
    filter spoe engine coraza config /usr/local/etc/haproxy/coraza.cfg
    log-format "%ci:%cp [%t] %ft %b/%s %Th/%Ti/%TR/%Tq/%Tw/%Tc/%Tr/%Tt %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r %[var(txn.coraza.id)] spoa-error: %[var(txn.coraza.error)] waf-hit: %[var(txn.coraza.fail)]"

    http-request redirect code 302 location %[var(txn.coraza.data)] if { var(txn.coraza.action) -m str redirect }
    http-response redirect code 302 location %[var(txn.coraza.data)] if { var(txn.coraza.action) -m str redirect }
    http-request deny deny_status 403 hdr waf-block "request" if { var(txn.coraza.action) -m str deny }
    http-response deny deny_status 403 hdr waf-block "response" if { var(txn.coraza.action) -m str deny }
    http-request silent-drop if { var(txn.coraza.action) -m str drop }
    http-response silent-drop if { var(txn.coraza.action) -m str drop }
    http-request deny deny_status 500 if { var(txn.coraza.error) -m int gt 0 }
    http-response deny deny_status 500 if { var(txn.coraza.error) -m int gt 0 }
    
    use_backend be_a_servers if host_a_com
    use_backend be_b_servers if host_b_com
    default_backend httpbin_backend

frontend fe_9001_https
    mode http
    bind abns@haproxy-9001-https accept-proxy ssl crt "@sites/a_com_cert"
    
    filter spoe engine coraza config /usr/local/etc/haproxy/coraza.cfg
    log-format "%ci:%cp [%t] %ft %b/%s %Th/%Ti/%TR/%Tq/%Tw/%Tc/%Tr/%Tt %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r %[var(txn.coraza.id)] spoa-error: %[var(txn.coraza.error)] waf-hit: %[var(txn.coraza.fail)]"

    http-request redirect code 302 location %[var(txn.coraza.data)] if { var(txn.coraza.action) -m str redirect }
    http-response redirect code 302 location %[var(txn.coraza.data)] if { var(txn.coraza.action) -m str redirect }
    http-request deny deny_status 403 hdr waf-block "request" if { var(txn.coraza.action) -m str deny }
    http-response deny deny_status 403 hdr waf-block "response" if { var(txn.coraza.action) -m str deny }
    http-request silent-drop if { var(txn.coraza.action) -m str drop }
    http-response silent-drop if { var(txn.coraza.action) -m str drop }
    http-request deny deny_status 500 if { var(txn.coraza.error) -m int gt 0 }
    http-response deny deny_status 500 if { var(txn.coraza.error) -m int gt 0 }
    
    use_backend httpbin_backend

frontend fe_9001_http
    mode http
    bind abns@haproxy-9001-http accept-proxy
    
    filter spoe engine coraza config /usr/local/etc/haproxy/coraza.cfg
    log-format "%ci:%cp [%t] %ft %b/%s %Th/%Ti/%TR/%Tq/%Tw/%Tc/%Tr/%Tt %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r %[var(txn.coraza.id)] spoa-error: %[var(txn.coraza.error)] waf-hit: %[var(txn.coraza.fail)]"

    http-request redirect code 302 location %[var(txn.coraza.data)] if { var(txn.coraza.action) -m str redirect }
    http-response redirect code 302 location %[var(txn.coraza.data)] if { var(txn.coraza.action) -m str redirect }
    http-request deny deny_status 403 hdr waf-block "request" if { var(txn.coraza.action) -m str deny }
    http-response deny deny_status 403 hdr waf-block "response" if { var(txn.coraza.action) -m str deny }
    http-request silent-drop if { var(txn.coraza.action) -m str drop }
    http-response silent-drop if { var(txn.coraza.action) -m str drop }
    http-request deny deny_status 500 if { var(txn.coraza.error) -m int gt 0 }
    http-response deny deny_status 500 if { var(txn.coraza.error) -m int gt 0 }
    
    use_backend httpbin_backend

frontend default
    mode http
    bind *:80
    filter spoe engine coraza config /usr/local/etc/haproxy/coraza.cfg
    log-format "%ci:%cp\ [%t]\ %ft\ %b/%s\ %Th/%Ti/%TR/%Tq/%Tw/%Tc/%Tr/%Tt\ %ST\ %B\ %CC\ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %hr\ %hs\ %{+Q}r\ %[var(txn.coraza.id)]\ spoa-error:\ %[var(txn.coraza.error)]\ waf-hit:\ %[var(txn.coraza.fail)]"

    # Currently haproxy cannot use variables to set the code or deny_status, so this needs to be manually configured here
    http-request redirect code 302 location %[var(txn.coraza.data)] if { var(txn.coraza.action) -m str redirect }
    http-response redirect code 302 location %[var(txn.coraza.data)] if { var(txn.coraza.action) -m str redirect }

    http-request deny deny_status 403 hdr waf-block "request"  if { var(txn.coraza.action) -m str deny }
    http-response deny deny_status 403 hdr waf-block "response" if { var(txn.coraza.action) -m str deny }

    http-request silent-drop if { var(txn.coraza.action) -m str drop }
    http-response silent-drop if { var(txn.coraza.action) -m str drop }

    # Deny in case of an error, when processing with the Coraza SPOA
    http-request deny deny_status 500 if { var(txn.coraza.error) -m int gt 0 }
    http-response deny deny_status 500 if { var(txn.coraza.error) -m int gt 0 }

    use_backend httpbin_backend


# 添加新的负载均衡后端配置
# backend be_a_servers
#     mode http
#     balance roundrobin
#     # 新的健康检查语法
#     option httpchk
#     http-check send meth GET uri / ver HTTP/1.1 hdr Host a.com
#     http-check expect status 200
#     default-server inter 3s fall 3 rise 2
#     server a1 $BACKEND_HOST check
#     server a2 $BACKEND_HOST check
#     server a3 $BACKEND_HOST check backup

# backend be_b_servers
#     mode http
#     balance roundrobin
#     # 新的健康检查语法
#     option httpchk
#     http-check send meth GET uri / ver HTTP/1.1 hdr Host b.com
#     http-check expect status 200
#     default-server inter 3s fall 3 rise 2
#     server b1 $BACKEND_HOST check
#     server b2 $BACKEND_HOST check
#     server b3 $BACKEND_HOST check backup

backend be_a_servers
    mode http
    server a1 $BACKEND_HOST
    server a2 $BACKEND_HOST
    server a3 $BACKEND_HOST

backend be_b_servers
    mode http
    server b1 $BACKEND_HOST
    server b2 $BACKEND_HOST
    server b3 $BACKEND_HOST

resolvers host_dns
    parse-resolv-conf

backend httpbin_backend
    mode http
    server backend $BACKEND_HOST

backend coraza-spoa
    mode tcp
    server coraza_spoa host.docker.internal:2342
